---
/**
 * PKCE Flow: Server-side magic link verification endpoint
 * This endpoint handles the access_token from the magic link email
 * and exchanges it for a session server-side (more secure than implicit flow)
 */
import { createSupabaseServerClient } from "@/db/supabase.client";
import { warn, secureError } from "@/lib/server/logger.service";

export const prerender = false;

/**
 * Validates that a redirect path is safe and doesn't lead to an open redirect vulnerability.
 *
 * @param path - The path to validate
 * @returns True if the path is safe to redirect to, false otherwise
 */
function isValidRedirect(path: string): boolean {
  try {
    // Must start with / and not be a protocol-relative URL
    if (!path.startsWith("/") || path.startsWith("//")) {
      return false;
    }

    // Parse as URL with a dummy base to validate path structure
    // The URL constructor will throw if the path is invalid
    new URL(path, "http://dummy.local");

    // Ensure no protocol in the path (more precise than just checking for ':')
    // This prevents attacks like /javascript:alert(1) or /data:text/html,...
    if (path.match(/^[a-zA-Z][a-zA-Z0-9+.-]*:/)) {
      return false;
    }

    return true;
  } catch {
    return false;
  }
}

// Get query parameters
const url = new URL(Astro.request.url);
const tokenHash = url.searchParams.get("access_token");
const type = url.searchParams.get("type");
const next = url.searchParams.get("next");

import { ENV } from "@/lib/server/env-validation.service";

// Get locale from cookie or use default
const locale = Astro.cookies.get("locale")?.value || ENV.PUBLIC_DEFAULT_LOCALE;

// Determine redirect destination
let redirectPath = next || `/${locale}/`;

// Defense in depth: Validate redirect URL to prevent open redirect attacks
if (!isValidRedirect(redirectPath)) {
  warn("Invalid redirect detected, using default", { attemptedRedirect: redirectPath });
  redirectPath = `/${locale}/`;
}

// Validate required parameters
if (!tokenHash || !type) {
  secureError("Missing required parameters for magic link verification");
  return Astro.redirect(`/${locale}/auth/error?error=invalid_link`);
}

// Create Supabase client
const supabase = createSupabaseServerClient(Astro.request, Astro.cookies);

try {
  // Exchange the token hash for a session (magic link flow)
  // This validates the token server-side and creates a session
  const { data, error } = await supabase.auth.verifyOtp({
    token_hash: tokenHash,
    type: type as "signup" | "invite" | "magiclink" | "recovery" | "email_change" | "email",
  });

  if (error) {
    secureError("Token verification failed", error);
    return Astro.redirect(
      `/${locale}/auth/error?error=verification_failed&message=${encodeURIComponent(error.message)}`
    );
  }

  if (!data.session) {
    secureError("No session created after token verification");
    return Astro.redirect(`/${locale}/auth/error?error=session_failed`);
  }

  // Session is now established via cookies automatically by Supabase client
  // Redirect to the intended destination
  return Astro.redirect(redirectPath);
} catch (err) {
  secureError("Unexpected error during token verification", err);
  return Astro.redirect(`/${locale}/auth/error?error=unexpected_error`);
}
---
